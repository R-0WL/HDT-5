{"ast":null,"code":"var _jsxFileName = \"/Users/fatu/Documents/Progra /HDT-5/simulador-so/frontend/src/components/App.jsx\";\nimport React, { useState } from 'react';\nimport { runSimulation, getExperiments } from '../api/simulationApi';\nimport Header from './layout/Header';\nimport Navigation from './layout/Navigation';\nimport ParametersForm from './simulation/ParametersForm';\nimport MemoryMonitor from './simulation/MemoryMonitor';\nimport LifecycleView from './simulation/LifecycleView';\nimport Results from './results/Results';\nimport ProcessesList from './settings/ProcessesList';\nimport ExperimentOptions from './settings/ExperimentOptions';\nimport InfoPanel from './layout/InfoPanel';\nconst App = () => {\n  // Estado para parámetros de simulación\n  const [params, setParams] = useState({\n    numProcesses: 50,\n    arrivalInterval: 10,\n    ramMemory: 100,\n    instructionsPerUnit: 3,\n    numCpus: 1,\n    includeTimeSeries: true\n  });\n\n  // Estado para pestañas de navegación\n  const [activeTab, setActiveTab] = useState('simulation');\n\n  // Estados para resultados y datos de simulación\n  const [results, setResults] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [processes, setProcesses] = useState([]);\n  const [memoryUsed, setMemoryUsed] = useState(45); // Valor de ejemplo\n  const [stateCounts, setStateCounts] = useState({\n    new: 1,\n    ready: 2,\n    running: 1,\n    waiting: 1,\n    terminated: 0\n  });\n\n  // Trigger para actualizar gráficas\n  const [refreshGraphs, setRefreshGraphs] = useState(0);\n\n  // Iniciar una simulación\n  const startSimulation = async () => {\n    setLoading(true);\n    try {\n      const data = await runSimulation(params);\n      setResults(data);\n      if (data.processes) {\n        setProcesses(data.processes.slice(0, 10)); // Mostrar solo los primeros 10\n      }\n      if (data.timeSeriesData && data.timeSeriesData.length > 0) {\n        // Tomar el último registro de series temporales para mostrar el estado final\n        const lastEntry = data.timeSeriesData[data.timeSeriesData.length - 1];\n        setMemoryUsed(params.ramMemory - lastEntry.memoryLevel);\n        setStateCounts(lastEntry.statesCount);\n      }\n\n      // Incrementar el contador para actualizar gráficas\n      setRefreshGraphs(prev => prev + 1);\n\n      // Cambiar a la pestaña de resultados\n      setActiveTab('results');\n    } catch (error) {\n      console.error(\"Error en la simulación:\", error);\n      alert(\"Error al ejecutar la simulación. Consulta la consola para más detalles.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Ejecutar todos los experimentos\n  const runAllExperiments = async () => {\n    setLoading(true);\n    try {\n      await getExperiments();\n\n      // Incrementar el contador para actualizar gráficas\n      setRefreshGraphs(prev => prev + 1);\n      setActiveTab('results');\n      alert(\"Todos los experimentos han sido ejecutados y las gráficas han sido generadas.\");\n    } catch (error) {\n      console.error(\"Error al ejecutar experimentos:\", error);\n      alert(\"Error al ejecutar los experimentos. Consulta la consola para más detalles.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Manejar cambios en los parámetros\n  const handleParamChange = (name, value) => {\n    setParams({\n      ...params,\n      [name]: value\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bg-gradient-to-b from-blue-400 to-blue-600 min-h-screen font-sans\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Navigation, {\n    activeTab: activeTab,\n    setActiveTab: setActiveTab,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container mx-auto p-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, activeTab === 'simulation' && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid grid-cols-1 md:grid-cols-2 gap-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ParametersForm, {\n    params: params,\n    loading: loading,\n    onParamChange: handleParamChange,\n    onStartSimulation: startSimulation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"space-y-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MemoryMonitor, {\n    memoryUsed: memoryUsed,\n    totalMemory: params.ramMemory,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(LifecycleView, {\n    stateCounts: stateCounts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }))), activeTab === 'results' && /*#__PURE__*/React.createElement(Results, {\n    refreshTrigger: refreshGraphs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 37\n    }\n  }), activeTab === 'settings' && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid grid-cols-1 md:grid-cols-2 gap-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ProcessesList, {\n    processes: processes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ExperimentOptions, {\n    onRunExperiment: newParams => {\n      // Actualizar parámetros y ejecutar simulación\n      Object.keys(newParams).forEach(key => {\n        handleParamChange(key, newParams[key]);\n      });\n      startSimulation();\n    },\n    onRunAllExperiments: runAllExperiments,\n    loading: loading,\n    onGoToResults: () => setActiveTab('results'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(InfoPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }));\n};\nexport default App;","map":{"version":3,"names":["React","useState","runSimulation","getExperiments","Header","Navigation","ParametersForm","MemoryMonitor","LifecycleView","Results","ProcessesList","ExperimentOptions","InfoPanel","App","params","setParams","numProcesses","arrivalInterval","ramMemory","instructionsPerUnit","numCpus","includeTimeSeries","activeTab","setActiveTab","results","setResults","loading","setLoading","processes","setProcesses","memoryUsed","setMemoryUsed","stateCounts","setStateCounts","new","ready","running","waiting","terminated","refreshGraphs","setRefreshGraphs","startSimulation","data","slice","timeSeriesData","length","lastEntry","memoryLevel","statesCount","prev","error","console","alert","runAllExperiments","handleParamChange","name","value","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onParamChange","onStartSimulation","totalMemory","refreshTrigger","onRunExperiment","newParams","Object","keys","forEach","key","onRunAllExperiments","onGoToResults"],"sources":["/Users/fatu/Documents/Progra /HDT-5/simulador-so/frontend/src/components/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { runSimulation, getExperiments } from '../api/simulationApi';\nimport Header from './layout/Header';\nimport Navigation from './layout/Navigation';\nimport ParametersForm from './simulation/ParametersForm';\nimport MemoryMonitor from './simulation/MemoryMonitor';\nimport LifecycleView from './simulation/LifecycleView';\nimport Results from './results/Results';\nimport ProcessesList from './settings/ProcessesList';\nimport ExperimentOptions from './settings/ExperimentOptions';\nimport InfoPanel from './layout/InfoPanel';\n\nconst App = () => {\n  // Estado para parámetros de simulación\n  const [params, setParams] = useState({\n    numProcesses: 50,\n    arrivalInterval: 10,\n    ramMemory: 100,\n    instructionsPerUnit: 3,\n    numCpus: 1,\n    includeTimeSeries: true\n  });\n  \n  // Estado para pestañas de navegación\n  const [activeTab, setActiveTab] = useState('simulation');\n  \n  // Estados para resultados y datos de simulación\n  const [results, setResults] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [processes, setProcesses] = useState([]);\n  const [memoryUsed, setMemoryUsed] = useState(45); // Valor de ejemplo\n  const [stateCounts, setStateCounts] = useState({\n    new: 1, ready: 2, running: 1, waiting: 1, terminated: 0\n  });\n  \n  // Trigger para actualizar gráficas\n  const [refreshGraphs, setRefreshGraphs] = useState(0);\n  \n  // Iniciar una simulación\n  const startSimulation = async () => {\n    setLoading(true);\n    try {\n      const data = await runSimulation(params);\n      setResults(data);\n      \n      if (data.processes) {\n        setProcesses(data.processes.slice(0, 10)); // Mostrar solo los primeros 10\n      }\n      \n      if (data.timeSeriesData && data.timeSeriesData.length > 0) {\n        // Tomar el último registro de series temporales para mostrar el estado final\n        const lastEntry = data.timeSeriesData[data.timeSeriesData.length - 1];\n        setMemoryUsed(params.ramMemory - lastEntry.memoryLevel);\n        setStateCounts(lastEntry.statesCount);\n      }\n      \n      // Incrementar el contador para actualizar gráficas\n      setRefreshGraphs(prev => prev + 1);\n      \n      // Cambiar a la pestaña de resultados\n      setActiveTab('results');\n    } catch (error) {\n      console.error(\"Error en la simulación:\", error);\n      alert(\"Error al ejecutar la simulación. Consulta la consola para más detalles.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Ejecutar todos los experimentos\n  const runAllExperiments = async () => {\n    setLoading(true);\n    try {\n      await getExperiments();\n      \n      // Incrementar el contador para actualizar gráficas\n      setRefreshGraphs(prev => prev + 1);\n      \n      setActiveTab('results');\n      alert(\"Todos los experimentos han sido ejecutados y las gráficas han sido generadas.\");\n    } catch (error) {\n      console.error(\"Error al ejecutar experimentos:\", error);\n      alert(\"Error al ejecutar los experimentos. Consulta la consola para más detalles.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Manejar cambios en los parámetros\n  const handleParamChange = (name, value) => {\n    setParams({\n      ...params,\n      [name]: value\n    });\n  };\n  \n  return (\n    <div className=\"bg-gradient-to-b from-blue-400 to-blue-600 min-h-screen font-sans\">\n      <Header />\n      <Navigation activeTab={activeTab} setActiveTab={setActiveTab} />\n\n      <div className=\"container mx-auto p-4\">\n        {/* Pestaña de simulación */}\n        {activeTab === 'simulation' && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <ParametersForm \n              params={params} \n              loading={loading}\n              onParamChange={handleParamChange}\n              onStartSimulation={startSimulation}\n            />\n            <div className=\"space-y-4\">\n              <MemoryMonitor memoryUsed={memoryUsed} totalMemory={params.ramMemory} />\n              <LifecycleView stateCounts={stateCounts} />\n            </div>\n          </div>\n        )}\n        \n        {/* Pestaña de resultados */}\n        {activeTab === 'results' && <Results refreshTrigger={refreshGraphs} />}\n        \n        {/* Pestaña de configuración */}\n        {activeTab === 'settings' && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <ProcessesList processes={processes} />\n            <ExperimentOptions \n              onRunExperiment={(newParams) => {\n                // Actualizar parámetros y ejecutar simulación\n                Object.keys(newParams).forEach(key => {\n                  handleParamChange(key, newParams[key]);\n                });\n                startSimulation();\n              }} \n              onRunAllExperiments={runAllExperiments}\n              loading={loading}\n              onGoToResults={() => setActiveTab('results')}\n            />\n          </div>\n        )}\n      </div>\n      \n      <InfoPanel />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}